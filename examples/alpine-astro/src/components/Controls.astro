---
import type { ControlRecord, ControlValue } from "@zag-js/shared"
import { deepGet } from "@zag-js/shared"

interface Props<T extends ControlRecord> {
  config: T
  state: ControlValue<T>
  viz?: boolean
}

const { config, state } = Astro.props
---

<div class="controls-container">
  {
    Object.keys(config).map((key) => {
      const { type, label = key } = config[key]
      const value = deepGet(state, key)
      switch (type) {
        case "boolean":
          return (
            <div class="checkbox">
              <input data-testid={key} id={label} type="checkbox" checked={value} x-model={key} />
              <label for={label}>{label}</label>
            </div>
          )
        case "string":
          const { placeholder } = config[key]
          return (
            <div class="text">
              <label style="margin-right: 10px">{label}</label>
              <input data-testid={key} type="text" placeholder={placeholder} value={value} x-model={key} />
            </div>
          )
        case "select": {
          const { options } = config[key]
          return (
            <div class="text">
              <label for={label} style="margin-right: 10px">
                {label}
              </label>
              <select data-testid={key} id={label} value={value} x-model={key}>
                <option>-----</option>
                {options.map((option) => (
                  <option value={option}>{option}</option>
                ))}
              </select>
            </div>
          )
        }
        case "number":
          const { min, max } = config[key]
          return (
            <div class="text">
              <label for={label} style="margin-right: 10px">
                {label}
              </label>
              <input data-testid={key} id={label} type="number" min={min} max={max} value={value} x-model={key} />
            </div>
          )
      }
    })
  }
</div>
