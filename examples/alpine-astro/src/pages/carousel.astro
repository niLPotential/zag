---
import { carouselControls, getControlDefaults } from "@zag-js/shared"
import Controls from "../components/Controls.astro"
import Toolbar from "../components/Toolbar.astro"

const state = getControlDefaults(carouselControls)
---

<script>
  import "@zag-js/shared/src/style.css"
  import * as carousel from "@zag-js/carousel"
  import { carouselData } from "@zag-js/shared"
  import Alpine from "alpinejs"
  import { useMachine } from "../lib/machine"
  import { normalizeProps } from "../lib/normalize-props"

  Alpine.magic("carouselData", () => carouselData)
  Alpine.directive("carousel", (el, { expression, value }, { cleanup, effect, evaluateLater }) => {
    if (!value) {
      const evaluateProps = evaluateLater(expression)
      const propsRef = Alpine.reactive({ value: {} as any })
      evaluateProps((value) => (propsRef.value = value))
      const service = useMachine(carousel.machine, propsRef)
      Alpine.bind(el, {
        "x-data"() {
          return {
            api: carousel.connect(service, normalizeProps),
            init() {
              queueMicrotask(() => {
                effect(() => {
                  evaluateProps((value: any) => (propsRef.value = value))
                  this.api = carousel.connect(service, normalizeProps)
                })
              })
              service.init()
            },
            destroy() {
              service.destroy()
            },
          }
        },
      })
    } else {
      const getProps = `get${value
        .split("-")
        .map((v) => v.at(0)?.toUpperCase() + v.substring(1).toLowerCase())
        .join("")}Props`
      const evaluateProps = expression ? evaluateLater(expression) : null
      let cleanupBinding = () => {}
      effect(() => {
        cleanupBinding()
        let props = {}
        evaluateProps && evaluateProps((value: any) => (props = value))
        cleanupBinding = Alpine.bind(el, (Alpine.$data(el) as any).api[getProps](props))
      })
      cleanup(() => {
        cleanupBinding()
      })
    }
  })
  Alpine.magic("carousel", (el) => (Alpine.$data(el) as any).api)
</script>

<div
  x-data={JSON.stringify(state)}
  x-id="['carousel']"
  x-carousel={`{
    id: $id('carousel'),
    spacing: '20px',
    slidesPerPage: 2,
    slideCount: $carouselData.length,
    allowMouseDrag: true,
    ${Object.keys(state)}
  }`}
>
  <main class="carousel">
    <div x-carousel:root>
      <button x-on:click="$carousel.scrollToIndex(4)">Scroll to 4</button>
      <div x-carousel:control>
        <button x-carousel:autoplay-trigger x-text="$carousel.isPlaying ? 'Stop' : 'Play'"></button>
        <div class="carousel-spacer"></div>
        <button x-carousel:prev-trigger>Prev</button>
        <button x-carousel:next-trigger>Next</button>
      </div>

      <div x-carousel:item-group>
        <template x-for="(image, index) in $carouselData" x-bind:key="index">
          <div x-carousel:item="{index}">
            <img x-bind:src="image" alt="" width="188px" />
          </div>
        </template>
      </div>
      <div x-carousel:indicator-group>
        <template x-for="(_, index) in $carousel.pageSnapPoints" x-bind:key="index">
          <button x-carousel:indicator="{index}"></button>
        </template>
      </div>
    </div>
  </main>

  <Toolbar>
    <Controls {state} config={carouselControls} slot="controls" />
  </Toolbar>
</div>
