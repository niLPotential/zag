---
import { checkboxControls, getControlDefaults } from "@zag-js/shared"
import Toolbar from "../components/Toolbar.astro"
import Controls from "../components/Controls.astro"

const state = getControlDefaults(checkboxControls)
---

<script>
  import "@zag-js/shared/src/style.css"
  import * as checkbox from "@zag-js/checkbox"
  import serialize from "form-serialize"
  import Alpine from "alpinejs"
  import { useMachine } from "../lib/machine"
  import { normalizeProps } from "../lib/normalize-props"

  Alpine.magic("serialize", () => {
    return (form: any, options: any) => serialize(form, options)
  })
  Alpine.directive("checkbox", (el, { expression, value }, { cleanup, effect, evaluateLater }) => {
    if (!value) {
      const evaluateProps = evaluateLater(expression)
      const propsRef = Alpine.reactive({ value: {} as any })
      evaluateProps((value) => (propsRef.value = value))
      const service = useMachine(checkbox.machine, propsRef)
      Alpine.bind(el, {
        "x-data"() {
          return {
            api: checkbox.connect(service, normalizeProps),
            init() {
              queueMicrotask(() => {
                effect(() => {
                  evaluateProps((value: any) => (propsRef.value = value))
                  this.api = checkbox.connect(service, normalizeProps)
                })
              })
              service.init()
            },
            destroy() {
              service.destroy()
            },
          }
        },
      })
    } else {
      const getProps = `get${value
        .split("-")
        .map((v) => v.at(0)?.toUpperCase() + v.substring(1).toLowerCase())
        .join("")}Props`
      const evaluateProps = expression ? evaluateLater(expression) : null
      let cleanupBinding = () => {}
      effect(() => {
        cleanupBinding()
        let props = {}
        evaluateProps && evaluateProps((value: any) => (props = value))
        cleanupBinding = Alpine.bind(el, (Alpine.$data(el) as any).api[getProps](props))
      })
      cleanup(() => {
        cleanupBinding()
      })
    }
  })
  Alpine.magic("checkbox", (el) => (Alpine.$data(el) as any).api)
</script>

<div
  x-data={JSON.stringify(state)}
  x-id="['checkbox']"
  x-checkbox={`{id: $id('checkbox'), name: 'checkbox', ${Object.keys(state)}}`}
>
  <main class="checkbox">
    <form
      x-on:change="(e) => {
      const result = $serialize(e.currentTarget, { hash: true });
      console.log(result);
    }"
    >
      <fieldset>
        <label x-checkbox:root>
          <div x-checkbox:control></div>
          <span x-checkbox:label x-text="'Input' + ($checkbox.checked ? 'Checked' : 'Unchecked')"></span>
          <input x-checkbox:hidden-input data-testid="hidden-input" />
          <div x-checkbox:indicator>Indicator</div>
        </label>

        <button type="button" x-bind:disabled="$checkbox.checked" x-on:click="$checkbox.setChecked(true)">
          Check
        </button>
        <button type="button" x-bind:disabled="! $checkbox.checked" x-on:click="$checkbox.setChecked(false)">
          Uncheck
        </button>
        <button type="reset">Reset Form</button>
      </fieldset>
    </form>
  </main>

  <Toolbar>
    <Controls {state} config={checkboxControls} slot="controls" />
  </Toolbar>
</div>
